[
  {
    "objectID": "posts/Random Forest/index.html",
    "href": "posts/Random Forest/index.html",
    "title": "Using RF to estimate pd",
    "section": "",
    "text": "This is the first post of my blog\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/Log_Reg/LR.html",
    "href": "posts/Log_Reg/LR.html",
    "title": "Using logistic regression to predict loans defualt rate",
    "section": "",
    "text": "In this post, I will use the logit regression method to predict default rate."
  },
  {
    "objectID": "posts/Log_Reg/LR.html#data",
    "href": "posts/Log_Reg/LR.html#data",
    "title": "Using logistic regression to predict loans defualt rate",
    "section": "Data",
    "text": "Data\nTo answer the question, I will analyze loan data for 5000 banking system customers in a Middle Eastern country.\n\ndf = pd.read_csv(\"C:\\\\Users\\\\rtava\\\\OneDrive\\\\Documents\\\\Git\\\\MLProject\\\\loans_clean.csv\")\n\n\nVaribales\nThe following table provide a description for variables in the data set.\n\n\n\n\n\n\n\nVariable name\nDescription\n\n\n\n\ndate_granted\nthe date which the loan granted\n\n\nlabel\nis =1 if the costumer paid at least one installment with more than 90 days delay\n\n\ninstallment\nnumber of the requested loan installment"
  },
  {
    "objectID": "posts/Log_Reg/LR.html#descriptive-statistics",
    "href": "posts/Log_Reg/LR.html#descriptive-statistics",
    "title": "Using logistic regression to predict loans defualt rate",
    "section": "Descriptive Statistics",
    "text": "Descriptive Statistics\n\n#df=df.loc[data[\"date_granted\"]&lt;20218000]\n\n\nprint(\"This dataset has\", df.shape[0], \"records with\", df.shape[1], \"atributes\")\nprint(\"About\", df.label.mean().round(2) , \"of lables was defaulted with label 1\") \n\nThis dataset has 5578 records with 33 atributes\nAbout 0.38 of lables was defaulted with label 1\n\n\n#sns.scatterplot(data, x=“installment”, y=“amount_approved”)\ndf.loc[df[‘installment’]&gt;61, ‘installment_group’]=“less than 60” df.installment_group.fillna(“more”, inplace=True)\nsns.set_theme(style=“whitegrid”) sns.scatterplot(x=“installment”, y=“amount_approved”, s=5, palette=“ch:r=-.2,d=.3_r”, sizes=(1, 8), linewidth=0, hue=“installment_group”, data=df)\n\ndf.columns\n\nIndex(['national_code', 'date_granted', 'label', 'installment', 'num_loans',\n       'age', 'gender', 'marital', 'num_negstatus_2years',\n       'num_negstatus_before_2years', 'total_early_payment',\n       'total_delayed_payment', 'max_installment_amount', 'oldest_loan_age',\n       'complete_last_payment_age', 'num_prev_0_1_year_loans',\n       'num_prev_1_3_year_loans', 'guarantor_role',\n       'negstatus_guarantor_last_12month',\n       'negstatus_guarantor_before_12month', 'completed_loan_ratio',\n       'outstanding_debt_ratio', 'past_due_6_month', 'past_due_6_18_month',\n       'past_due_18_more_month', 'undue_12_month', 'undue_12_more_month',\n       'default_12_month', 'default_12_more_month',\n       'worst_negative_status_last_2years', 'current_installments',\n       'age_last_negative_status', 'amount_approved'],\n      dtype='object')\n\n\n\ngroup_demography = ['age', 'gender', 'marital']\ngroup_requested_load = ['date_granted', 'label', 'installment','amount_approved']\ngroup_repayment_history = ['total_delayed_payment', 'total_early_payment','num_negstatus_2years',\n       'num_negstatus_before_2years', 'negstatus_guarantor_last_12month',\n       'negstatus_guarantor_before_12month','past_due_6_month', 'past_due_6_18_month',\n       'past_due_18_more_month', 'undue_12_month', 'undue_12_more_month',\n       'default_12_month', 'default_12_more_month',\n       'worst_negative_status_last_2years','age_last_negative_status']\ngroup_financial_history = ['num_loans', 'max_installment_amount', 'oldest_loan_age',\n       'complete_last_payment_age', 'num_prev_0_1_year_loans',\n       'num_prev_1_3_year_loans', 'guarantor_role',\n       'completed_loan_ratio', 'outstanding_debt_ratio', 'current_installments']\n\n\nall_columns = group_demography + group_requested_load + group_repayment_history + group_financial_history\ndf_new = df[all_columns];\n\nfor c in df_new.columns:\n    q1 = df_new[c].quantile(0.05)\n    q3 = df_new[c].quantile(0.95)\n    iqr = q3-q1\n    lower_fence = q1 - 1.5*iqr\n    upper_fence = q3 + 1.5*iqr\n\n    for i in range(len(df)):\n        if df_new.loc[i, c] &lt; lower_fence or df_new.loc[i, c] &gt; upper_fence:  # if outlier\n            df_new.loc[i, \"out_\" + c] = 1\n        else:\n            df_new.loc[i, \"out_\" + c] = 0\n\nout_col = [col for col in df_new.columns if 'out_' in col]\ndf_new['out'] = df_new[out_col].sum(axis=1)\n\ndf_new = df_new.loc[df_new.out==0]\ndf_new.drop([col for col in df_new.columns if 'out_' in col], axis=1, inplace=True)\n\n\ndf_prep = pd.get_dummies(df_new, columns=['worst_negative_status_last_2years'])\n\nfor column in ['worst_negative_status_last_2years_0.0', \n          'worst_negative_status_last_2years_1.0', \n          'worst_negative_status_last_2years_2.0',\n          'worst_negative_status_last_2years_3.0']:\n        df_prep[column] = df_prep[column].replace({True: 1, False: 0})\n\n\ncorr = df_prep[['age', 'gender', 'marital']].corr(method = 'pearson')\ncorr\nsns.heatmap(corr,annot=True,fmt=\".1f\", linewidth=.5)\n\n&lt;Axes: &gt;\n\n\n\n\n\n\nx_col = ['age', 'installment','amount_approved',\n        'total_delayed_payment','num_negstatus_2years',\n       'num_negstatus_before_2years','past_due_6_month', 'past_due_6_18_month',\n       'past_due_18_more_month', 'undue_12_month', 'undue_12_more_month',\n       'num_loans','oldest_loan_age', 'outstanding_debt_ratio',\n       'worst_negative_status_last_2years_0.0', 'worst_negative_status_last_2years_1.0', \n       'worst_negative_status_last_2years_2.0', 'worst_negative_status_last_2years_3.0']\n\n#'default_12_month'\n\n\nfrom sklearn.model_selection import train_test_split\ndf_train, df_test = train_test_split(df_prep, test_size=0.2, random_state = 1234)\n\nX_train, y_train = df_train[x_col], df_train['label']\nX_test, y_test = df_test[x_col], df_test['label']\n\nprint(\"Train Sample Size:\", X_train.shape[0],\n      \"\\nTest Sample Size:\", X_test.shape[0])\n\nTrain Sample Size: 3832 \nTest Sample Size: 958\n\n\n\nfrom sklearn import metrics\nfrom sklearn.ensemble import RandomForestClassifier \n\nthreshold = 0.4\n\nRF_model = RandomForestClassifier(random_state=1234, max_depth = 20, n_estimators=100, class_weight='balanced')\nRF_model.fit(X_train,y_train)\ny_prob_RF = RF_model.predict_proba(X_test)\ny_pred_RF = (y_prob_RF[:,1] &gt;= threshold).astype('int')\nAccuracy_RF = metrics.accuracy_score(y_test, y_pred_RF)\nF1_RF = metrics.f1_score(y_test, y_pred_RF)\nAUC = metrics.roc_auc_score(y_test, y_pred_RF)\nclas_report = metrics.classification_report(y_test, y_pred_RF)\n\n\nfrom sklearn import metrics\nfrom sklearn.ensemble import RandomForestClassifier\n\nFscore = []\nthrsh = []\nfor i in range(10,65,1):\n    threshold = i/100\n    thrsh.append(threshold)\n\n    RF_model = RandomForestClassifier(random_state=1234, max_depth = 20, n_estimators=100, class_weight='balanced')\n    RF_model.fit(X_train,y_train)\n    y_prob_RF = RF_model.predict_proba(X_test)\n    y_pred_RF = (y_prob_RF[:,1] &gt;= threshold).astype('int')\n    Accuracy_RF = metrics.accuracy_score(y_test, y_pred_RF)\n    Fscore.append(metrics.f1_score(y_test, y_pred_RF))\n    AUC = metrics.roc_auc_score(y_test, y_pred_RF)\n    clas_report = metrics.classification_report(y_test, y_pred_RF)\n\n\nsns.lineplot(x=thrsh, y=Fscore)\n\n&lt;Axes: &gt;\n\n\n\n\n\n\nfrom sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\n\n\nprint(\"RF Accuracy:\",Accuracy_RF, \"\\nF1 Score:\", F1_RF, \"\\nAUC_ROC:\", AUC)\nConfusionMatrixDisplay.from_estimator(RF_model, X_test, y_test);\n\nRF Accuracy: 0.662839248434238 \nF1 Score: 0.5616045845272206 \nAUC_ROC: 0.547780471176426"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Me",
    "section": "",
    "text": "I’m Reza Tavakoli - a PhD student in Economics at Virginia Tech University. I have a keen interest in using various tools to answer serious questions. Through this blog, I will be sharing material related to introducing different kinds of econometric and machine learning methods, using these methods to answer important questions that matter."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "MLProject",
    "section": "",
    "text": "Using logistic regression to predict loans defualt rate\n\n\n\n\n\n\n\nML\n\n\nregression\n\n\nclassification\n\n\n\n\n\n\n\n\n\n\n\nOct 22, 2023\n\n\nReza Tavakoli\n\n\n\n\n\n\n  \n\n\n\n\nPost With Code\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nOct 11, 2023\n\n\nHarlow Malloc\n\n\n\n\n\n\n  \n\n\n\n\nUsing RF to estimate pd\n\n\n\n\n\n\n\nRandom Forest\n\n\n\n\n\n\n\n\n\n\n\nOct 8, 2023\n\n\nReza\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  }
]